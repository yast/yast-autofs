/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/autofs/dialogs.ycp
 * Package:	Configuration of autofs
 * Summary:	Dialogs definitions
 * Authors:	Peter Varkoly <varkoly@novell.com>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "autofs";

import "Label";
import "Wizard";
import "Autofs";

include "autofs/helps.ycp";
include "autofs/complex.ycp";


/**
 * @param entries   a list of the entries in a map
 * @return          a ui table list on items
 */
define list<term> TableItems(list<map<string,string> > entries) ``{
	//y2milestone("Entries %1", entries);
	if( entries == nil )
	{
		return [];
	}
	return maplist(map etnry, entries, ``{
	    term it = `item(`id(etnry["key"]:""), etnry["key"]:"",etnry["options"]:"",etnry["location"]:"");
	    return it;
	});
}

/**
 * Add map dialog
 * @return the name of the new map
 */
define string AddMapDialog () ``{

	UI::OpenDialog(`opt(`decorated),
	               `HBox(`HSpacing(1),
	                     `VBox(`VSpacing(0.2),
	                           `HSpacing (30),
	                           // text entry label
	                           `TextEntry(`id(`mapname), _("Name of the map"), ""),
	                           `VSpacing(0.2),
	                           // ok pushbutton: confirm the dialog
	                           `ButtonBox(`PushButton(`id(`ok),     Label::OKButton()),
	                                      `PushButton(`id(`cancel), Label::CancelButton())),
	                           `VSpacing(0.2)),
	                     `HSpacing(1)
	                   ));

	any        ret = nil;
	string mapname = "";
	while(true) {
	    ret = UI::UserInput();
	    /* abort? */
	    if(ret == `abort || ret == `cancel) {
	        if(ReallyAbort()) break;
	        else continue;
	    }
	    else if(ret == `ok) {
	        mapname = (string) UI::QueryWidget(`id(`mapname), `Value);
		break;
	    }
	    else {
	        y2error("unexpected retcode: %1", ret);
	        continue;
	    }
	}
	UI::CloseDialog ();
	if(ret == `ok)
	{
	    return mapname;
	}
	else
	{
	  return nil;
	}
}

/**
 * Add/Modify entry dialog
 * @return the key the options and the location of the entry
 */
define map<string, string> EntryDialog (map<string, string> Entry) ``{

	map<string, string> NewEntry = $[];

        if( Entry == $[] )
	{
	  UI::OpenDialog(`opt(`decorated),
		       `HBox(
			     `MinWidth( 25,
				`ReplacePoint(`id(`Help),
			            `RichText(`id(`HelpText), HELPS["EntryDialogNFS"]:"")
				)
			      ),
			     `HSpacing(1),
			     `VBox(`VSpacing(0.2),
				   `HSpacing (30),
				   `Frame(_("Type"),
				     `RadioButtonGroup( `id(`type),`opt (`notify),
				        `HBox(
						`RadioButton (`id(`nfs),  `opt(`notify),  "NFS",true),
						`RadioButton (`id(`samba),`opt(`notify), "SAMBA",false),
						`RadioButton (`id(`other),`opt(`notify), _("Other"),false)
					)
				     )
				   ),
				   `TextEntry(`id(`key),       _("Key"), ""),
				   `ReplacePoint(`id(`fields),
				     `VBox(
				       `TextEntry(`id(`options),   _("Options"), "-fstype=nfs,rw,soft,async"),
				       `TextEntry(`id(`location1), _("Server"), ""),
				       `TextEntry(`id(`location2), _("Path"), "")
				      )
				   ),
				   `VSpacing(0.2),
				   // ok pushbutton: confirm the dialog
				   `ButtonBox(`PushButton(`id(`ok),     Label::OKButton()),
					      `PushButton(`id(`cancel), Label::CancelButton())),
				   `VSpacing(0.2)
				),
			     `HSpacing(1)
			   )
		        );
	}
	else
	{
	  UI::OpenDialog(`opt(`decorated),
		       `HBox(`HSpacing(1),
			     `VBox(`VSpacing(0.2),
				   `HSpacing (30),
				   `TextEntry(`id(`key),      _("Key"),      Entry["key"]:""),
				   `TextEntry(`id(`options),  _("Options"),  Entry["options"]:""),
				   `TextEntry(`id(`location), _("Location"), Entry["location"]:""),
				   `VSpacing(0.2),
				   // ok pushbutton: confirm the dialog
				   `ButtonBox(`PushButton(`id(`ok),     Label::OKButton()),
					      `PushButton(`id(`cancel), Label::CancelButton())),
				   `VSpacing(0.2)),
			     `HSpacing(1)
			   )
			);
	}
	any        ret = nil;
	string mapname = "";
	while(true) {
	    ret = UI::UserInput();
	    /* abort? */
	    if(ret == `abort || ret == `cancel) {
	        if(ReallyAbort()) break;
	        else continue;
	    }
	    else if( ret == `nfs )
	    {
		UI::ReplaceWidget(`id(`fields),
			`VBox(
			     `TextEntry(`id(`options),   _("Options"), "-fstype=nfs,rw,soft,async"),
			     `TextEntry(`id(`location1), _("Server"),  ""),
			     `TextEntry(`id(`location2), _("Path"),    "")
			)
		);
		UI::ReplaceWidget(`id(`Help),
			        `RichText(`id(`HelpText), HELPS["EntryDialogNFS"]:"")
		);
		continue;
	    }
	    else if( ret == `samba )
	    {
		UI::ReplaceWidget(`id(`fields),
			`VBox(
			     `TextEntry(`id(`options),   _("Options"), "-fstype=cifs"),
			     `TextEntry(`id(`location1), _("Server"),  ""),
			     `TextEntry(`id(`location2), _("Share"),    "")
			)
		);
		UI::ReplaceWidget(`id(`Help),
			        `RichText(`id(`HelpText), HELPS["EntryDialogSAMBA"]:"")
		);
		continue;
	    }
	    else if( ret == `other)
	    {
		UI::ReplaceWidget(`id(`fields),
			`VBox(
			     `TextEntry(`id(`options),  _("Options"),  ""),
			     `TextEntry(`id(`location), _("Location"), "")
			)
		);
		UI::ReplaceWidget(`id(`Help),
			        `RichText(`id(`HelpText), HELPS["EntryDialogOther"]:"")
		);
		continue;
	    }
	    else if( ret == `ok )
	    {
		NewEntry["key"]     = (string) UI::QueryWidget(`id(`key), `Value);
		NewEntry["options"] = (string) UI::QueryWidget(`id(`options), `Value);
		if( UI::WidgetExists(`id(`location1) ))
		{
		  if( UI::QueryWidget(`id(`type), `CurrentButton) == `samba )
		  {
		    NewEntry["location"] = "://"+
					   (string) UI::QueryWidget(`id(`location1), `Value) +
			                   (string) UI::QueryWidget(`id(`location2), `Value);
		  }
		  else
		  {
		    NewEntry["location"] = (string) UI::QueryWidget(`id(`location1), `Value) +
					   ":" +
			                   (string) UI::QueryWidget(`id(`location2), `Value);
		  }
		}
		else
		{
		  NewEntry["location"] = (string) UI::QueryWidget(`id(`location), `Value);
		}
		break;
	    }
	    else
	    {
	        y2error("unexpected retcode: %1", ret);
	        continue;
	    }
	}
	UI::CloseDialog ();
	if(ret == `ok)
	{
	  return NewEntry;
	}
	else
	{
	  return nil;
	}
}

/**
 * Autofs configurations dialog, for add delete or modify maps and map entries
 * @return dialog result
 */
define any ConfigureDialog () ``{

    /* Autofs configure1 dialog caption */
    string caption = _("Autofs Configuration");

    list<string>      LMaps = Autofs::GetLMaps();

    /* Autofs configure1 dialog contents */
    term contents =
        `VBox(
	    `ReplacePoint(`id(`mapslist),
	       `SelectionBox(`id(`maps), `opt(`notify), _("Maps"), LMaps)
	    ),
            `ButtonBox(
		  `PushButton(`id(`addmap), _("Add")),
                  `PushButton(`id(`delmap), _("Delete"))
		 ),
	    `Table(`id(`entries), `header(_("Key"),_("Options"),_("Location")),[]),
	    `ButtonBox(
                  `PushButton(`id(`addentry), _("Add")),
//                `PushButton(`id(`modentry), _("Edit")),
                  `PushButton(`id(`delentry), _("Delete"))
                 )
	   );

    Wizard::SetContentsButtons(caption, contents, HELPS["ConfigureDialog"]:"",
	    Label::BackButton(), Label::NextButton());

    Wizard::SetNextButton(`next, Label::FinishButton() );
    UI::ChangeWidget (`id (`back), `Enabled, false);

    string actmap = "";
    // preselect an item - convenience, button enabling
    if (size(LMaps) > 0)
    {
        UI::ChangeWidget(`id (`maps), `CurrentItem, LMaps[0]:"");
        actmap = (string) UI::QueryWidget (`id (`maps), `CurrentItem);
	UI::ChangeWidget(`id (`entries), `Items, TableItems(Autofs::GetEntriesOfMap(actmap)));
    }

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* click on a map*/
	else if(ret == `maps)
	{
	  actmap = (string) UI::QueryWidget (`id (`maps), `CurrentItem);
	  UI::ChangeWidget(`id (`entries), `Items, TableItems(Autofs::GetEntriesOfMap(actmap)));
	  continue;
	}
	/* addmap */
	else if(ret == `addmap)
	{
		string newmap = AddMapDialog();
		if( newmap != nil )
		{
			Autofs::AddMap(newmap);
			LMaps = Autofs::GetLMaps();
			UI::ReplaceWidget(`id(`mapslist),
			  `SelectionBox(`id(`maps), `opt(`notify), _("Maps"), LMaps)
			);
			UI::ChangeWidget(`id (`maps), `CurrentItem, newmap);
			actmap = newmap;
		}
		continue;
	}
	/* remove a map */
	else if(ret == `delmap)
	{
		Autofs::DelMap(actmap);
		LMaps = Autofs::GetLMaps();
		UI::ReplaceWidget(`id(`mapslist),
		  `SelectionBox(`id(`maps), `opt(`notify), _("Maps"), LMaps)
		);
		if (size(LMaps) > 0)
		{
		    UI::ChangeWidget(`id (`maps), `CurrentItem, LMaps[0]:"");
		    actmap = (string) UI::QueryWidget (`id (`maps), `CurrentItem);
		}
		continue;
	}
	/* add a new entry */
	else if(ret == `addentry)
	{
	  map<string,string> NewEntry = EntryDialog($[]);
	  if( NewEntry != nil )
	  {
		Autofs::AddEntry(actmap,NewEntry);
		UI::ChangeWidget(`id (`entries), `Items, TableItems(Autofs::GetEntriesOfMap(actmap)));
	  }
	  continue;
	}
	/* delete an entry */
	else if(ret == `delentry)
	{
	  string key = (string) UI::QueryWidget (`id (`entries), `CurrentItem);
	  if( key != nil )
	  {
	     Autofs::DelEntry(key,actmap);
	     UI::ChangeWidget(`id (`entries), `Items, TableItems(Autofs::GetEntriesOfMap(actmap)));
	  }
	  continue;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
